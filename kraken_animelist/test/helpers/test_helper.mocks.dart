// Mocks generated by Mockito 5.4.4 from annotations
// in anime_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:anime_app/core/error/failures.dart' as _i6;
import 'package:anime_app/features/anime/data/datasources/anime_remote_data_source.dart'
    as _i9;
import 'package:anime_app/features/anime/data/models/anime_details_model.dart'
    as _i3;
import 'package:anime_app/features/anime/data/models/anime_model.dart' as _i7;
import 'package:anime_app/features/anime/domain/entities/anime.dart' as _i11;
import 'package:anime_app/features/anime/domain/entities/anime_details.dart'
    as _i8;
import 'package:anime_app/features/anime/domain/repositories/anime_repository.dart'
    as _i4;
import 'package:anime_app/features/anime/domain/usecases/get_anime_details.dart'
    as _i12;
import 'package:anime_app/features/anime/domain/usecases/get_anime_list.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeDetailsModel_1 extends _i1.SmartFake
    implements _i3.AnimeDetailsModel {
  _FakeAnimeDetailsModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnimeRepository_2 extends _i1.SmartFake
    implements _i4.AnimeRepository {
  _FakeAnimeRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnimeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRepository extends _i1.Mock implements _i4.AnimeRepository {
  MockAnimeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.AnimeModel>>> getAnimeList(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeList,
          [page],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.AnimeModel>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.AnimeModel>>(
          this,
          Invocation.method(
            #getAnimeList,
            [page],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.AnimeModel>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i8.AnimeDetails>> getAnimeDetails(
          int? animeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeDetails,
          [animeId],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i8.AnimeDetails>>.value(
                _FakeEither_0<_i6.Failure, _i8.AnimeDetails>(
          this,
          Invocation.method(
            #getAnimeDetails,
            [animeId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i8.AnimeDetails>>);
}

/// A class which mocks [AnimeRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRemoteDataSource extends _i1.Mock
    implements _i9.AnimeRemoteDataSource {
  MockAnimeRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i7.AnimeModel>> getAnimeList(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeList,
          [page],
        ),
        returnValue: _i5.Future<List<_i7.AnimeModel>>.value(<_i7.AnimeModel>[]),
      ) as _i5.Future<List<_i7.AnimeModel>>);

  @override
  _i5.Future<_i3.AnimeDetailsModel> getAnimeDetails(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnimeDetails,
          [id],
        ),
        returnValue:
            _i5.Future<_i3.AnimeDetailsModel>.value(_FakeAnimeDetailsModel_1(
          this,
          Invocation.method(
            #getAnimeDetails,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.AnimeDetailsModel>);
}

/// A class which mocks [GetAnimeListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAnimeListUseCase extends _i1.Mock
    implements _i10.GetAnimeListUseCase {
  MockGetAnimeListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AnimeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAnimeRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.AnimeRepository);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i11.Anime>>> call(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [page],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i11.Anime>>>.value(
                _FakeEither_0<_i6.Failure, List<_i11.Anime>>(
          this,
          Invocation.method(
            #call,
            [page],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i11.Anime>>>);
}

/// A class which mocks [GetAnimeDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAnimeDetailsUseCase extends _i1.Mock
    implements _i12.GetAnimeDetailsUseCase {
  MockGetAnimeDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AnimeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAnimeRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.AnimeRepository);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i8.AnimeDetails>> call(int? animeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [animeId],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, _i8.AnimeDetails>>.value(
                _FakeEither_0<_i6.Failure, _i8.AnimeDetails>(
          this,
          Invocation.method(
            #call,
            [animeId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i8.AnimeDetails>>);
}
